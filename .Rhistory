source("connect.R")
population_total <- ddw('fact.population_total')
getwd()
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
population_total <- ddw('fact.population_total') %>% data.table
View(population_total)
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
population_total <- ddw('fact.population_total') %>% data.table
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
population_total <- ddw('fact.population_total') %>% data.table
View(population_total)
ddw
con
ddw('fact.gni')
schemaListTables('fact')
ddw
strsplit('fact.population_total',".",fixed=TRUE)[[1]]
dbReadTable(con,'fact.population_total')
dbReadTable(con,'population_total')
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
ddw('fact.gni')
dbReadTable(con,'fact.population_total')
population_total <- ddw('fact.population_total') %>% data.table
population_total <- ddw('fact.population_total') %>% data.table
dbReadTable(con,'fact.population_total')
dbReadTable(con,'fact.population_total')
dbReadTable(con,'fact.population_total')
dbReadTable(con,fact.population_total)
dbReadTable(con,'fact.population_total'')
;
''
''
dbGetQuery(con,'Select * from fact.population_total')
dbReatT
dbReadTable(con,'population_total')
?dbReadTable
dbReadTable(con,'fact.population_total')
dbReadTable(con,c('fact','population_total'))
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
ddw('fact.population_total')
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
ddw('fact.population_total')
dbDisconnect(con)
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
ddw('fact.population_total')
ddw
list.of.packages <- c("data.table","readr","dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
options(scipen = 999)
wd='/Users/boss/Dev_Musings/devinit/ddw_update/rscripts/ddw-r-scripts'
setwd(wd)
#This file can only be processed after fact table has been processed successfully
source("baseYearConstants.R")
source("connect.R")
ddw('fact.population_total')
ddw <- function(schemaTable){
c_ <- vector()
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
if(length(split)==2){
schema <- split[1]
table <- split[2]
print(paste0(schema,table))
schemaTables <- schemaListTables(schema)
if(table %in% schemaTables){
print('here')
c_ <- append(c_,schema)
c_ <- append(c_,table)
return(dbReadTable(con,c_))
}else{
print('here3')
return(data.frame())
}
}else{
print('here2')
allTables <- dbListTables(con)
if(schemaTable %in% allTables){
return(dbReadTable(con,schemaTable))
}else{
print('here4')
return(data.frame())
}
}
}
ddw('fact.population_total')
ddw <- function(schemaTable){
c_ <- vector()
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
if(length(split)==2){
schema <- split[1]
table <- split[2]
print(paste0(schema,table))
schemaTables <- schemaListTables(schema)
print(schemaTables)
if(table %in% schemaTables){
print('here')
c_ <- append(c_,schema)
c_ <- append(c_,table)
return(dbReadTable(con,c_))
}else{
print('here3')
return(data.frame())
}
}else{
print('here2')
allTables <- dbListTables(con)
if(schemaTable %in% allTables){
return(dbReadTable(con,schemaTable))
}else{
print('here4')
return(data.frame())
}
}
}
ddw('fact.population_total')
gdp_usd_current <- dbGetQuery('Select * from fact.gdp_usd_current')
gdp_usd_current <- dbGetQuery(con,'Select * from fact.gdp_usd_current')  #%>% data.table
View(gdp_usd_current)
View(gdp_usd_current)
dbGetQuery(con,'select * from dimension.wb_wdi_country_to_imf_weo_country_map')
dbReadTable(con,c("public","individual_wb_wdi_series_in_di_dh"))
list.of.packages <- c("WDI","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
# Change WD to git repo if needed
# Make sure you create ddw.txt in wd formatted as such:
#
# postgres_user_name
# postgres_ip_address
# postgres_port
# postgres_user_pass
# postgres_db_name
wd <- getwd()
message(wd)
gdp_usd_current_original <- WDI(country='all',indicator = 'NY.GDP.MKTP.CD',start = 1960,end = 2018,extra=TRUE)
View(gdp_usd_current_original)
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
wd <- getwd()
message(wd)
#"~/git/ddw-r-scripts"
#setwd(wd)
source("connect.R")
source("baseYearConstants.R")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
dbGetQuery("Select * from fact.dkalld")
dbGetQuery(con,"Select * from fact.dkalld")
tryCatch(dbQuery())
tryCatch({
return(
dbGetQuery(con,'Select * from fact.kdkakd'))
},error = function(e){
return(data.frame(NULL))
})
y <- tryCatch({
return(
dbGetQuery(con,'Select * from fact.kdkakd'))
},error = function(e){
return(data.frame(NULL))
})
y <- tryCatch({
return(
dbGetQuery(con,'Select * from fact.kdkakd'))
},warning = function(w){
return(data.frame())
},
error = function(e){
return(data.frame(NULL))
})
y <- tryCatch({
dbGetQuery(con,'Select * from fact.kdkakd')
},warning = function(w){
data.frame()
},
error = function(e){
data.frame(NULL)
})
list.of.packages <- c("RPostgreSQL")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(RPostgreSQL)
cred <- readLines("ddw.txt")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv
,dbname=cred[5]
,host = cred[2]
,port = as.numeric(cred[3])
,user = cred[1]
,password = cred[4]
)
# tables <- dbListTables(con)
schemaListTables <- function(schema){
query <- paste0("SELECT table_name FROM information_schema.tables
WHERE table_schema='",schema,"'")
return(dbGetQuery(con,query))
}
randomQuery <- function(query){
return(dbGetQuery(con,query));
}
# facts <- schemaListTables("fact")
ddw <- function(schemaTable){
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
if(length(split)==2){
schema <- split[1]
table <- split[2]
schemaTables <- schemaListTables(schema)
if(table %in% schemaTables){
return(dbReadTable(con,c(schema,table)))
}else{
return(data.frame())
}
}else{
allTables <- dbListTables(con)
if(schemaTable %in% allTables){
return(dbReadTable(con,schemaTable))
}else{
return(data.frame())
}
}
}
rm(cred,drv,list.of.packages,new.packages)
# dat <- dlTableIfExists(con,"fact.population_total")
#bDisconnect(con)
rm(list=ls())
list.of.packages <- c("RPostgreSQL")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(RPostgreSQL)
cred <- readLines("ddw.txt")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv
,dbname=cred[5]
,host = cred[2]
,port = as.numeric(cred[3])
,user = cred[1]
,password = cred[4]
)
# tables <- dbListTables(con)
schemaListTables <- function(schema){
query <- paste0("SELECT table_name FROM information_schema.tables
WHERE table_schema='",schema,"'")
return(dbGetQuery(con,query))
}
randomQuery <- function(query){
return(dbGetQuery(con,query));
}
# facts <- schemaListTables("fact")
ddw <- function(schemaTable){
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
if(length(split)==2){
schema <- split[1]
table <- split[2]
schemaTables <- schemaListTables(schema)
if(table %in% schemaTables){
return(dbReadTable(con,c(schema,table)))
}else{
return(data.frame())
}
}else{
allTables <- dbListTables(con)
if(schemaTable %in% allTables){
return(dbReadTable(con,schemaTable))
}else{
return(data.frame())
}
}
}
rm(cred,drv,list.of.packages,new.packages)
# dat <- dlTableIfExists(con,"fact.population_total")
#bDisconnect(con)
dddw('fact.population_total')
ddw('fact.population_total')
schemaTable <- 'fact.population_total'
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
length(split)
schema <- split[1]
table <- split[2]
schemaTables <- schemaListTables(schema)
View(schemaTables)
table %in% schemaTables
table %in% schemaTables
'population_total' %in% schemaTables
'population_total' %in% as.vector(schemaTables)
as.vector(schemaTables)
table
table %in% schemaTables
table %!in% schemaTables
schemaTables < as.factor(schemaTables)
View(schemaTables)
View(schemaTables)
View(schemaTables$table_name)
table %in% schemaTables$table_name
dbListTables(con)
list.of.packages <- c("RPostgreSQL")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(RPostgreSQL)
cred <- readLines("ddw.txt")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv
,dbname=cred[5]
,host = cred[2]
,port = as.numeric(cred[3])
,user = cred[1]
,password = cred[4]
)
# tables <- dbListTables(con)
schemaListTables <- function(schema){
query <- paste0("SELECT table_name FROM information_schema.tables
WHERE table_schema='",schema,"'")
return(dbGetQuery(con,query))
}
randomQuery <- function(query){
return(dbGetQuery(con,query));
}
# facts <- schemaListTables("fact")
ddw <- function(schemaTable){
schemaTable <- 'fact.population_total'
split <- strsplit(schemaTable,".",fixed=TRUE)[[1]]
if(length(split)==2){
schema <- split[1]
table <- split[2]
schemaTables <- schemaListTables(schema)
if(table %in% schemaTables$table_name){
return(dbReadTable(con,c(schema,table)))
}else{
return(data.frame())
}
}else{
allTables <- dbListTables(con)
if(schemaTable %in% allTables$table_name){
return(dbReadTable(con,schemaTable))
}else{
return(data.frame())
}
}
}
rm(cred,drv,list.of.packages,new.packages)
# dat <- dlTableIfExists(con,"fact.population_total")
#bDisconnect(con)
ddw('fact.population_total')
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
View(wdi_id_map)
View(wdi_id_map)
list.of.packages <- c("WDI","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
# Change WD to git repo if needed
# Make sure you create ddw.txt in wd formatted as such:
#
# postgres_user_name
# postgres_ip_address
# postgres_port
# postgres_user_pass
# postgres_db_name
wd <- getwd()
message(wd)
#"~/git/ddw-r-scripts"
#setwd(wd)
source("connect.R")
source("baseYearConstants.R")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
View(wdi_id_map)
rm(list=ls())
list.of.packages <- c("WDI","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
# Change WD to git repo if needed
# Make sure you create ddw.txt in wd formatted as such:
#
# postgres_user_name
# postgres_ip_address
# postgres_port
# postgres_user_pass
# postgres_db_name
wd <- getwd()
message(wd)
#"~/git/ddw-r-scripts"
#setwd(wd)
source("connect.R")
source("baseYearConstants.R")
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
View(wdi_id_map)
dbDisconnect(con)
list.of.packages <- c("WDI","data.table")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
# Change WD to git repo if needed
# Make sure you create ddw.txt in wd formatted as such:
#
# postgres_user_name
# postgres_ip_address
# postgres_port
# postgres_user_pass
# postgres_db_name
wd <- getwd()
message(wd)
#"~/git/ddw-r-scripts"
#setwd(wd)
source("connect.R")
source("baseYearConstants.R")
# Pull in id mappings and deflators. Performing merges to append di_id to the deflator
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
View(wdi_id_map)
setnames(wdi_id_map,"di_id","iso2c")
View(wdi_id_map)
deflator = fread("output/usd_deflator_2014_2016_apr.csv",na.strings = "",stringsAsFactors = F)
View(deflator)
series = ddw('public.individual_wb_wdi_series_in_di_dh')
View(series)
WDI(country='all',indicator='NY.GDP.MKTP.CD')
y <- WDI(country='all',indicator='NY.GDP.MKTP.CD')
View(y)
View(series)
View(wdi_id_map)
View(deflator)
# Pull in id mappings and deflators. Performing merges to append di_id to the deflator
wdi_id_map = ddw("dimension.wb_wdi_country_to_di_id_map")
setnames(wdi_id_map,c("di_id","wb_wdi_country_code"),c("iso2c","iso3c"))
deflator = fread("output/usd_deflator_2014_2016_apr.csv",na.strings = "",stringsAsFactors = F)
deflator <- merge(deflator,wdi_id_map,by.x = 'iso_alpha_3_code',by.y = 'iso3c',all.x = T)
View(deflator)
imf_wdi_map = ddw("dimension.wb_wdi_country_to_imf_weo_country_map")
View(imf_wdi_map)
View(imf_wdi_map)
imf_wdi_map <- merge(imf_wdi_map,wdi_id_map,by.x = 'wb_wdi_country_code',by.y = 'iso3c',all.x = T)
View(imf_wdi_map)
test <- WDI(country='all',indicator='NY.GDP.MKTP.CD')
View(test)
View(test)
test <- WDI(country='all',indicator='NY.GDP.MKTP.CD',extra = T)
View(test)
